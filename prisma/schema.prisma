generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String            @id @default(cuid())
  name      String            @unique
  slug      String            @unique
  sortOrder Int               @default(0)
  isActive  Boolean           @default(true)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  products  ProductCategory[]
}

model Product {
  id              String            @id @default(cuid())
  name            String
  description     String?
  priceType       PriceType
  basePrice       Int
  unit            String
  imageUrl        String?
  isActive        Boolean           @default(true)
  hasStock        Boolean           @default(true)
  usageOptionIds  String?
  flavorOptionIds String?
  quantityMethods String            @default("WEIGHT")
  hasRemarks      Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  priority        Int               @default(3)
  orderItems      OrderItem[]
  categories      ProductCategory[]

  @@index([isActive, priority])
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  customerName  String
  customerEmail String
  customerPhone String
  pickupDate    DateTime
  pickupTime    String
  totalAmount   Int
  status        OrderStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  orderItems    OrderItem[]

  @@index([status, pickupDate])
  @@index([customerName])
}

model OrderItem {
  id               String  @id @default(cuid())
  quantity         Int
  price            Int
  subtotal         Int
  selectedMethod   String
  pieceGrams       Int?
  pieceCount       Int?
  packCount        Int?
  usageOptionId    String?
  usageOptionName  String?
  flavorOptionId   String?
  flavorOptionName String?
  remarks          String?
  orderId          String
  productId        String
  order            Order   @relation(fields: [orderId], references: [id])
  product          Product @relation(fields: [productId], references: [id])

  @@index([orderId, productId])
}

model UsageOption {
  id        String   @id @default(cuid())
  name      String   @unique
  sortOrder Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FlavorOption {
  id        String   @id @default(cuid())
  name      String   @unique
  sortOrder Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  password String
  role     Role   @default(ADMIN)
}

model ProductCategory {
  id         String   @id @default(cuid())
  productId  String
  categoryId String
  createdAt  DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
  @@index([categoryId, productId])
}

enum PriceType {
  WEIGHT_BASED
  PACK
}

enum QuantityMethod {
  WEIGHT
  PIECE
  PACK
  PIECE_COUNT
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum Role {
  ADMIN
}
