// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Category {
  id        String            @id @default(cuid())
  name      String            @unique
  slug      String            @unique
  sortOrder Int               @default(0)
  isActive  Boolean           @default(true)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  products  ProductCategory[]
}

model Product {
  id              String            @id @default(cuid())
  name            String
  description     String?
  priceType       PriceType         // WEIGHT_BASED, PACK
  basePrice       Int               // 重量単価商品は100g単位の価格、パック商品は固定価格
  unit            String            // "100g" または "パック"
  imageUrl        String?
  isActive        Boolean           @default(true)
  hasStock        Boolean           @default(true) // 在庫有無
  // 商品オプション設定（ID参照方式）
  usageOptionIds  String?           // カンマ区切りのオプションID "id1,id2,id3"
  flavorOptionIds String?           // カンマ区切りのオプションID "id1,id2,id3"
  quantityMethods String            @default("WEIGHT") // 数量・個数指定方法（カンマ区切り）
  hasRemarks      Boolean           @default(false)  // 備考欄の有無
  categories      ProductCategory[]
  orderItems      OrderItem[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  customerName  String
  customerEmail String
  customerPhone String
  pickupDate    DateTime
  pickupTime    String
  totalAmount   Int
  status        OrderStatus @default(PENDING)
  orderItems    OrderItem[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id                String  @id @default(cuid())
  quantity          Int     // 重量商品はグラム数、パック商品は個数
  price             Int     // 商品単価
  subtotal          Int     // 小計
  selectedMethod    String  // 選択された数量選択方法
  // 選択されたオプション
  usageOptionId     String? // 選択された用途オプションID
  usageOptionName   String? // 選択された用途オプション名（表示用）
  flavorOptionId    String? // 選択された味付けオプションID
  flavorOptionName  String? // 選択された味付けオプション名（表示用）
  remarks           String? // 備考
  orderId           String
  order             Order   @relation(fields: [orderId], references: [id])
  productId         String
  product           Product @relation(fields: [productId], references: [id])
}

model UsageOption {
  id        String   @id @default(cuid())
  name      String   @unique
  sortOrder Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FlavorOption {
  id        String   @id @default(cuid())
  name      String   @unique
  sortOrder Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  password String
  role     Role   @default(ADMIN)
}

enum PriceType {
  WEIGHT_BASED  // 重量単価
  PACK          // パック売り
}

enum QuantityMethod {
  WEIGHT        // 重量指定（g単位）
  PIECE         // 枚数指定
  PACK          // パック指定
  PIECE_COUNT   // 本数指定
}

enum OrderStatus {
  PENDING     // 注文受付
  PREPARING   // 準備中
  READY       // 準備完了
  COMPLETED   // 受け取り完了
  CANCELLED   // キャンセル
}

model ProductCategory {
  id         String   @id @default(cuid())
  productId  String
  categoryId String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  
  @@unique([productId, categoryId])
}

enum Role {
  ADMIN
}
